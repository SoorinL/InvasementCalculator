{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIZWIZSYSTEM\\\\reactStudy\\\\section9_project1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Header/Header.js\";\nimport InvestmentInput from \"./components/InvestmentInput/InvestmentInput.js\";\nimport ResultList from \"./components/ResultList/ResultList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [resultData, setResultData] = useState(\"\");\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n    let totalInterest = 0;\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalInterest += yearlyInterest;\n      console.log('yearlyInterestyearlyInterest :: ');\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        id: Math.random().toString(),\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalInterest: totalInterest\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n    setResultData(yearlyData);\n  };\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: \"No investment calculated yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n  if (resultData.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ResultList, {\n      items: resultData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M9aiRGJBf/79/5zlFgv99KMjYcM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","InvestmentInput","ResultList","jsxDEV","_jsxDEV","App","_s","resultData","setResultData","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","totalInterest","i","yearlyInterest","console","log","push","id","Math","random","toString","year","savingsEndOfYear","content","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","length","items","onCalculate","_c","$RefreshReg$"],"sources":["C:/Users/BIZWIZSYSTEM/reactStudy/section9_project1/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header/Header.js\";\nimport InvestmentInput from \"./components/InvestmentInput/InvestmentInput.js\";\nimport ResultList from \"./components/ResultList/ResultList.js\";\n\nfunction App() {\n  const [resultData, setResultData] = useState(\"\");\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    let totalInterest = 0;\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalInterest += yearlyInterest;  console.log('yearlyInterestyearlyInterest :: ');\n\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        id: Math.random().toString(),\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalInterest: totalInterest,\n      });\n    }\n\n    console.log(yearlyData);\n    // do something with yearlyData ...\n    setResultData(yearlyData);\n  };\n\n  let content = (\n    <p style={{ textAlign: \"center\" }}>No investment calculated yet.</p>\n  );\n  if (resultData.length > 0) {\n    content = <ResultList items={resultData} />;\n  }\n\n  return (\n    <div>\n      <Header />\n      <InvestmentInput onCalculate={calculateHandler} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      {content}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,eAAe,MAAM,iDAAiD;AAC7E,OAAOC,UAAU,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;IAEvC,IAAIM,aAAa,GAAG,CAAC;IACrB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGN,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIM,cAAc,GAAGL,kBAAkB;MACrDG,aAAa,IAAIE,cAAc;MAAGC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAEjFT,UAAU,CAACU,IAAI,CAAC;QACd;QACAC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QAC5BC,IAAI,EAAET,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BS,gBAAgB,EAAEf,cAAc;QAChCC,kBAAkB,EAAEA,kBAAkB;QACtCG,aAAa,EAAEA;MACjB,CAAC,CAAC;IACJ;IAEAG,OAAO,CAACC,GAAG,CAACT,UAAU,CAAC;IACvB;IACAH,aAAa,CAACG,UAAU,CAAC;EAC3B,CAAC;EAED,IAAIiB,OAAO,gBACTxB,OAAA;IAAGyB,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,EAAC;EAA6B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CACpE;EACD,IAAI5B,UAAU,CAAC6B,MAAM,GAAG,CAAC,EAAE;IACzBR,OAAO,gBAAGxB,OAAA,CAACF,UAAU;MAACmC,KAAK,EAAE9B;IAAW;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7C;EAEA,oBACE/B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA,CAACJ,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV/B,OAAA,CAACH,eAAe;MAACqC,WAAW,EAAE7B;IAAiB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAIjDP,OAAO;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAC7B,EAAA,CAtDQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}