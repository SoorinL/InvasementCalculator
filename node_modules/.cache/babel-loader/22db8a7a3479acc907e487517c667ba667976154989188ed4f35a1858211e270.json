{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIZWIZSYSTEM\\\\reactStudy\\\\section9_project1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Header/Header.js\";\nimport InvestmentInput from \"./components/InvestmentInput/InvestmentInput.js\";\nimport ResultList from \"./components/ResultList/ResultList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [resultData, setResultData] = useState(\"\");\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n    const yearlyData = []; // per-year results\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n    let totalInterest = 0;\n    let investedCapital = 0;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalInterest += yearlyInterest;\n      investedCapital = currentSavings - totalInterest;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        id: Math.random().toString(),\n        year: i + 1,\n        yearlyInterest: yearlyInterest.toLocaleString(),\n        savingsEndOfYear: currentSavings.toLocaleString(),\n        yearlyContribution: yearlyContribution.toLocaleString(),\n        totalInterest: totalInterest.toLocaleString(),\n        investedCapital: investedCapital.toLocaleString()\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n    setResultData(yearlyData);\n  };\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: \"No investment calculated yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n  if (resultData.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ResultList, {\n      items: resultData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M9aiRGJBf/79/5zlFgv99KMjYcM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","InvestmentInput","ResultList","jsxDEV","_jsxDEV","App","_s","resultData","setResultData","calculateHandler","userInput","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","totalInterest","investedCapital","i","yearlyInterest","push","id","Math","random","toString","year","toLocaleString","savingsEndOfYear","console","log","content","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","length","items","onCalculate","_c","$RefreshReg$"],"sources":["C:/Users/BIZWIZSYSTEM/reactStudy/section9_project1/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header/Header.js\";\nimport InvestmentInput from \"./components/InvestmentInput/InvestmentInput.js\";\nimport ResultList from \"./components/ResultList/ResultList.js\";\n\nfunction App() {\n  const [resultData, setResultData] = useState(\"\");\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n\n    const yearlyData = []; // per-year results\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    let totalInterest = 0;\n    let investedCapital = 0;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalInterest += yearlyInterest;\n      investedCapital = currentSavings - totalInterest;\n\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        id: Math.random().toString(),\n        year: i + 1,\n        yearlyInterest: yearlyInterest.toLocaleString(),\n        savingsEndOfYear: currentSavings.toLocaleString(),\n        yearlyContribution: yearlyContribution.toLocaleString(),\n        totalInterest: totalInterest.toLocaleString(),\n        investedCapital: investedCapital.toLocaleString(),\n      });\n    }\n\n    console.log(yearlyData);\n    // do something with yearlyData ...\n    setResultData(yearlyData);\n  };\n\n  let content = (\n    <p style={{ textAlign: \"center\" }}>No investment calculated yet.</p>\n  );\n  if (resultData.length > 0) {\n    content = <ResultList items={resultData} />;\n  }\n\n  return (\n    <div>\n      <Header />\n      <InvestmentInput onCalculate={calculateHandler} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      {content}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}